{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "resourcePrefix": {
      "type": "string",
      "metadata": {
        "description": "Prefix string for all resources. This would become part of the fully qualified domain name for each VM in the cluster, thus it should be globally unique."
      }
    },
    "adminUsername": {
      "type": "string",
      "metadata": {
        "description": "Username for the Virtual Machine."
      }
    },
    "adminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Password for the Virtual Machine."
      }
    },
    "CentOSOSVersion": {
      "type": "string",
      "defaultValue": "7.2",
      "metadata": {
        "description": "The CentOS version for deploying the Docker containers. This will pick a fully patched image of this given Ubuntu version. Allowed values: 14.04.4-LTS, 15.10, 16.04.0-LTS"
      },
      "allowedValues": [
        "6.5",
        "7.2"
      ]
    },
    "vmCount": {
      "type": "int",
      "metadata": {
        "description": "VM instance count in the cluster."
      },
      "defaultValue": 1,
      "maxValue": 4
    }
  },
  "variables": {
    "imagePublisher": "OpenLogic",
    "imageOffer": "CentOS",
    "OSDiskName": "osdiskfordockertest",
    "nicName": "myVMNicD",
    "extensionName": "CustomScriptForLinux",
    "addressPrefix": "10.0.0.0/16",
    "subnetName": "Subnet",
    "subnetPrefix": "10.0.0.0/24",
    "storageAccountType": "Standard_LRS",
    "storageAccountName": "[concat(parameters('resourcePrefix'),'sto')]",
    "publicIPAddressName": "myPublicIPD",
    "publicIPAddressType": "Dynamic",
    "vmStorageAccountContainerName": "vhds",
    "vmName": "[concat(parameters('resourcePrefix'),'DockerVM')]",
    "vmSize": "Standard_A1",
    "virtualNetworkName": "[concat(parameters('resourcePrefix'),'DockerVnet')]",
    "vnetID": "[resourceId('Microsoft.Network/virtualNetworks',variables('virtualNetworkName'))]",
    "subnetRef": "[concat(variables('vnetID'),'/subnets/',variables('subnetName'))]",
    "VMCount": "[parameters('vmCount')]",
    "VMStart": 1
  },
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('storageAccountName')]",
      "apiVersion": "2016-01-01",
      "sku": {
                "name": "[variables('storageAccountType')]",
                "tier": "Standard"
            },
      "kind": "Storage",
      "location": "[resourceGroup().location]",
      "properties": {}
    },
    {
      "apiVersion": "2016-03-30",
      "type": "Microsoft.Network/publicIPAddresses",
      "copy": {
        "name": "vmCountCopy",
        "count": "[variables('VMCount')]"
      },
      "name": "[concat(variables('publicIPAddressName'),copyIndex(variables('VMStart')))]",
      "location": "[resourceGroup().location]",
      "properties": {
        "publicIPAllocationMethod": "[variables('publicIPAddressType')]",
        "dnsSettings": {
          "domainNameLabel": "[concat(parameters('resourcePrefix'),'vm',copyIndex(variables('VMStart')))]"
        }
      }
    },
    {
      "apiVersion": "2016-03-30",
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[variables('virtualNetworkName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('addressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('subnetName')]",
            "properties": {
              "addressPrefix": "[variables('subnetPrefix')]"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2016-03-30",
      "type": "Microsoft.Network/networkInterfaces",
      "copy": {
        "name": "vmCountCopy",
        "count": "[variables('VMCount')]"
      },
      "name": "[concat(variables('nicName'),copyIndex(variables('VMStart')))]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('publicIPAddressName'),copyIndex(variables('VMStart')))]",
        "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses',concat(variables('publicIPAddressName'),copyIndex(variables('VMStart'))))]"
              },
              "subnet": {
                "id": "[variables('subnetRef')]"
              }
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Compute/virtualMachines",
      "copy": {
        "name": "vmCountCopy",
        "count": "[variables('VMCount')]"
      },
      "name": "[concat(variables('vmName'),copyIndex(variables('VMStart')))]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
        "[concat('Microsoft.Network/networkInterfaces/', variables('nicName'), copyIndex(variables('VMStart')))]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[variables('vmSize')]"
        },
        "osProfile": {
          "computerName": "[concat(variables('vmName'),copyIndex(variables('VMStart')))]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('imagePublisher')]",
            "offer": "[variables('imageOffer')]",
            "sku": "[parameters('CentOSOSVersion')]",
            "version": "latest"
          },
          "osDisk": {
            "name": "osdisk1",
            "vhd": {
              "uri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/',variables('storageAccountName')), '2016-01-01').primaryEndpoints.blob,variables('vmStorageAccountContainerName'),'/',variables('OSDiskName'),copyIndex(variables('VMStart')),'.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(variables('nicName'),copyIndex(variables('VMStart'))))]"
            }
          ]
        }
      }
    },
    {
      "name": "[concat(variables('vmName'),copyIndex(variables('VMStart')),'/installdocker')]",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "copy": {
        "name": "vmCopy",
        "count": "[variables('VMCount')]"
      },
      "apiVersion": "2015-06-15",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', variables('vmName'), copyIndex(variables('VMStart')))]"
      ],
      "properties": {
        "publisher": "Microsoft.OSTCExtensions",
        "type": "CustomScriptForLinux",
        "typeHandlerVersion": "1.4",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "fileUris": [
       /*     "[concat(parameters('_artifactsLocation'), '/scripts/installDocker.sh')]" */
              "https://raw.githubusercontent.com/jinmiaoms/docker-template/master/"
          ] 
        },
        "protectedSettings": {
          "commandToExecute": "bash scripts/installDocker.sh"
        }
       }
    }
  ]
}

